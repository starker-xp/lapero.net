<?php

namespace {{ namespaceController }}\Tests\Controller;

use Starkerxp\StructureBundle\Tests\WebTest;

class {{nomController}}ControllerTest extends WebTest
{

    /**
     * @group {{nomController|lower}}
     * @group post
     * @group controller
     */
    public function testPostValide()
    {
        $data = [
            //'nom'     => "Mon nom", //exemple
        ];
        $client = static::createClient();
        $client->request('POST', '/{{nomController|lower}}s', $data);
        $response = $client->getResponse();
        $this->assertEquals(201, $response->getStatusCode());
        $manager = $this->getContainer()->get('{{nomServiceEntity}}.manager.{{nomEntity|lower}}');
        ${{nomEntity}}s = $manager->findAll();
        $this->assertCount(1, ${{nomEntity}}s);
    }

    /**
     * @group {{nomController|lower}}
     * @group post
     * @group controller
     */
    public function testPostInvalide()
    {
        $client = static::createClient();
        $client->request('POST', '/{{nomController|lower}}s', []);
        $response = $client->getResponse();
        $this->assertEquals(400, $response->getStatusCode());
        $body = json_decode($response->getContent(), true)['payload'];
        //$this->assertArrayHasKey("nom", $body); // Exemple
    }


    /**
     * @group {{nomController|lower}}
     * @group put
     * @group controller
     */
    public function testPutValide()
    {
        $this->loadFixtureFiles(['{{namespaceEntityBundle}}/Tests/DataFixtures/{{nomEntity}}Manager/Default{{ nomEntity }}.yml']);
        $manager = $this->getContainer()->get('{{nomServiceEntity}}.manager.{{nomEntity|lower}}');
        $liste{{nomController}}s = $manager->getRepository()->findAll();
        $this->assertCount(1, $liste{{nomController}}s);
        ${{nomEntity}}Depart = $manager->toArray($liste{{nomController}}s[0], [/*'nom'*/]);// Exemple
        $data = [
            //'nom'     => "Mon nom", //exemple
        ];
        $client = static::createClient();
        $client->request('PUT', '/{{nomController|lower}}s/'.$liste{{nomController}}s[0]->getId(), $data);
        $response = $client->getResponse();
        $this->assertEquals(204, $response->getStatusCode());
        $manager->clear();
        ${{nomEntity}}s = $manager->findAll();
        $this->assertCount(1, ${{nomEntity}}s);
        ${{nomEntity}}Final = $manager->toArray(${{nomEntity}}s[0], [/*'nom'*/]);// Exemple
        $this->assertNotEquals(${{nomEntity}}Depart, ${{nomEntity}}Final);
        $this->assertEquals($data, ${{nomEntity}}Final);
    }

    /**
     * @group {{nomController|lower}}
     * @group put
     * @group controller
     */
    public function testPutInvalide()
    {
        $this->loadFixtureFiles(['{{namespaceEntityBundle}}/Tests/DataFixtures/{{nomEntity}}Manager/Default{{ nomEntity }}.yml']);
        $manager = $this->getContainer()->get('{{nomServiceEntity}}.manager.{{nomEntity|lower}}');
        $liste{{nomController}}s = $manager->getRepository()->findAll();
        $this->assertCount(1, $liste{{nomController}}s);
        $client = static::createClient();
        $client->request('PUT', '/{{nomController|lower}}s/'.$liste{{nomController}}s[0]->getId(), []);
        $response = $client->getResponse();
        $this->assertEquals(400, $response->getStatusCode());
        $body = json_decode($response->getContent(), true)['payload'];
        //$this->assertArrayHasKey("nom", $body); // Exemple
        
    }

    /**
     * @group {{nomController|lower}}
     * @group put
     * @group controller
     */
    public function testPutSansResultat()
    {
        $data = [
            //'nom'     => "Mon nom", //exemple
        ];
        $client = static::createClient();
        $client->request('PUT', '/{{nomController|lower}}s/404', $data);
        $response = $client->getResponse();
        $this->assertEquals(404, $response->getStatusCode());
        $body = json_decode($response->getContent(), true);
        $this->assertNotEmpty($body);
    }


    /**
     * @group {{nomController|lower}}
     * @group cget
     * @group controller
     */
    public function testCGetValideAvecResultats()
    {
        $this->loadFixtureFiles(['{{namespaceEntityBundle}}/Tests/DataFixtures/{{nomEntity}}Manager/{{nomController}}Manager.yml']);
        $client = static::createClient();
        $client->request('GET', '/{{nomController|lower}}s', []);
        $response = $client->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $body = json_decode($response->getContent(), true);
        $this->assertCount(10, $body);
        foreach ($body as $element) {
            //$this->assertArrayHasKey("nom", $body); // Exemple
        }
    }

    /**
     * @group {{nomController|lower}}
     * @group cget
     * @group controller
     */
    public function testCGetValideSansResultat()
    {
        $client = static::createClient();
        $client->request('GET', '/{{nomController|lower}}s', []);
        $response = $client->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $body = json_decode($response->getContent(), true);
        $this->assertCount(0, $body);
    }

    /**
     * @group {{nomController|lower}}
     * @group cget
     * @group controller
     */
    public function testCGetInvalide()
    {
        $client = static::createClient();
        $client->request('GET', '/{{nomController|lower}}s', ["filter_erreur" => "+h"]);
        $response = $client->getResponse();
        $this->assertEquals(400, $response->getStatusCode());
    }

    /**
     * @group {{nomController|lower}}
     * @group get
     * @group controller
     */
    public function testGetValideAvecResultats()
    {
        $this->loadFixtureFiles(['{{namespaceEntityBundle}}/Tests/DataFixtures/{{nomEntity}}Manager/{{nomController}}Manager.yml']);
        $manager = $this->getContainer()->get('{{nomServiceEntity}}.manager.{{nomEntity|lower}}');
        $liste{{nomController}}s = $manager->getRepository()->findAll();
        $this->assertCount(10, $liste{{nomController}}s);
        $client = static::createClient();
        $client->request('GET', '/{{nomController|lower}}s/'.$liste{{nomController}}s[0]->getId(), []);
        $response = $client->getResponse();
        $this->assertEquals(200, $response->getStatusCode());
        $body = json_decode($response->getContent(), true);
        $this->assertCount(5, $body);
        //$this->assertArrayHasKey("nom", $body); // Exemple
    }

    /**
     * @group {{nomController|lower}}
     * @group get
     * @group controller
     */
    public function testGetValideSansResultat()
    {
        $client = static::createClient();
        $client->request('GET', '/{{nomController|lower}}s/404', []);
        $response = $client->getResponse();
        $this->assertEquals(404, $response->getStatusCode());
        $body = json_decode($response->getContent(), true);
        $this->assertNotEmpty($body);
    }

    /**
     * @group {{nomController|lower}}
     * @group get
     * @group controller
     */
    public function testGetInvalide()
    {
        $client = static::createClient();
        $client->request('GET', '/{{nomController|lower}}s/500', ["filter_erreur" => "+h"]);
        $response = $client->getResponse();
        $this->assertEquals(400, $response->getStatusCode());
    }

    /**
     * @group {{nomController|lower}}
     * @group delete
     * @group controller
     */
    public function testDeleteValide()
    {
        $this->loadFixtureFiles(['{{namespaceEntityBundle}}/Tests/DataFixtures/{{nomEntity}}Manager/Default{{ nomEntity }}.yml']);
        $manager = $this->getContainer()->get('{{nomServiceEntity}}.manager.{{nomEntity|lower}}');
        $liste{{nomController}}s = $manager->getRepository()->findAll();
        $this->assertCount(1, $liste{{nomController}}s);
        $client = static::createClient();
        $client->request('DELETE', '/{{nomController|lower}}s/'.$liste{{nomController}}s[0]->getId());
        $response = $client->getResponse();
        $this->assertEquals(204, $response->getStatusCode());
        $manager->clear();
        ${{nomEntity}}s = $manager->findAll();
        $this->assertCount(0, ${{nomEntity}}s);
    }

    /**
     * @group {{nomController|lower}}
     * @group delete
     * @group controller
     */
    public function testDeleteSansResultat()
    {
        $client = static::createClient();
        $client->request('DELETE', '/{{nomController|lower}}s/404', []);
        $response = $client->getResponse();
        $this->assertEquals(404, $response->getStatusCode());
        $body = json_decode($response->getContent(), true);
        $this->assertNotEmpty($body);
    }
}
